#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import Types.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TExprNodeType(object):
  ARITHMETIC_EXPR = 0
  BINARY_PRED = 1
  BOOL_LITERAL = 2
  CASE_EXPR = 3
  CAST_EXPR = 4
  COMPOUND_PRED = 5
  DATE_LITERAL = 6
  FLOAT_LITERAL = 7
  INT_LITERAL = 8
  IN_PRED = 9
  IS_NULL_PRED = 10
  LIKE_PRED = 11
  LITERAL_PRED = 12
  NULL_LITERAL = 13
  SLOT_REF = 14
  STRING_LITERAL = 15
  TUPLE_IS_NULL_PRED = 16
  FUNCTION_CALL = 17
  AGGREGATE_EXPR = 18
  COMPUTE_FUNCTION_CALL = 19
  DECIMAL_LITERAL = 20

  _VALUES_TO_NAMES = {
    0: "ARITHMETIC_EXPR",
    1: "BINARY_PRED",
    2: "BOOL_LITERAL",
    3: "CASE_EXPR",
    4: "CAST_EXPR",
    5: "COMPOUND_PRED",
    6: "DATE_LITERAL",
    7: "FLOAT_LITERAL",
    8: "INT_LITERAL",
    9: "IN_PRED",
    10: "IS_NULL_PRED",
    11: "LIKE_PRED",
    12: "LITERAL_PRED",
    13: "NULL_LITERAL",
    14: "SLOT_REF",
    15: "STRING_LITERAL",
    16: "TUPLE_IS_NULL_PRED",
    17: "FUNCTION_CALL",
    18: "AGGREGATE_EXPR",
    19: "COMPUTE_FUNCTION_CALL",
    20: "DECIMAL_LITERAL",
  }

  _NAMES_TO_VALUES = {
    "ARITHMETIC_EXPR": 0,
    "BINARY_PRED": 1,
    "BOOL_LITERAL": 2,
    "CASE_EXPR": 3,
    "CAST_EXPR": 4,
    "COMPOUND_PRED": 5,
    "DATE_LITERAL": 6,
    "FLOAT_LITERAL": 7,
    "INT_LITERAL": 8,
    "IN_PRED": 9,
    "IS_NULL_PRED": 10,
    "LIKE_PRED": 11,
    "LITERAL_PRED": 12,
    "NULL_LITERAL": 13,
    "SLOT_REF": 14,
    "STRING_LITERAL": 15,
    "TUPLE_IS_NULL_PRED": 16,
    "FUNCTION_CALL": 17,
    "AGGREGATE_EXPR": 18,
    "COMPUTE_FUNCTION_CALL": 19,
    "DECIMAL_LITERAL": 20,
  }


class TBoolLiteral(object):
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.value = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TBoolLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.BOOL, 1)
      oprot.writeBool(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TCaseExpr(object):
  """
  Attributes:
   - has_case_expr
   - has_else_expr
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'has_case_expr', None, None, ), # 1
    (2, TType.BOOL, 'has_else_expr', None, None, ), # 2
  )

  def __init__(self, has_case_expr=None, has_else_expr=None,):
    self.has_case_expr = has_case_expr
    self.has_else_expr = has_else_expr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.has_case_expr = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.has_else_expr = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TCaseExpr')
    if self.has_case_expr is not None:
      oprot.writeFieldBegin('has_case_expr', TType.BOOL, 1)
      oprot.writeBool(self.has_case_expr)
      oprot.writeFieldEnd()
    if self.has_else_expr is not None:
      oprot.writeFieldBegin('has_else_expr', TType.BOOL, 2)
      oprot.writeBool(self.has_else_expr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.has_case_expr is None:
      raise TProtocol.TProtocolException(message='Required field has_case_expr is unset!')
    if self.has_else_expr is None:
      raise TProtocol.TProtocolException(message='Required field has_else_expr is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDateLiteral(object):
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDateLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I64, 1)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TDecimalLiteral(object):
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TDecimalLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 1)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TFloatLiteral(object):
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.value = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TFloatLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.DOUBLE, 1)
      oprot.writeDouble(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TIntLiteral(object):
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TIntLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I64, 1)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TInPredicate(object):
  """
  Attributes:
   - is_not_in
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_not_in', None, None, ), # 1
  )

  def __init__(self, is_not_in=None,):
    self.is_not_in = is_not_in

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_not_in = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TInPredicate')
    if self.is_not_in is not None:
      oprot.writeFieldBegin('is_not_in', TType.BOOL, 1)
      oprot.writeBool(self.is_not_in)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.is_not_in is None:
      raise TProtocol.TProtocolException(message='Required field is_not_in is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TIsNullPredicate(object):
  """
  Attributes:
   - is_not_null
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'is_not_null', None, None, ), # 1
  )

  def __init__(self, is_not_null=None,):
    self.is_not_null = is_not_null

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.is_not_null = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TIsNullPredicate')
    if self.is_not_null is not None:
      oprot.writeFieldBegin('is_not_null', TType.BOOL, 1)
      oprot.writeBool(self.is_not_null)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.is_not_null is None:
      raise TProtocol.TProtocolException(message='Required field is_not_null is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TLikePredicate(object):
  """
  Attributes:
   - escape_char
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'escape_char', None, None, ), # 1
  )

  def __init__(self, escape_char=None,):
    self.escape_char = escape_char

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.escape_char = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TLikePredicate')
    if self.escape_char is not None:
      oprot.writeFieldBegin('escape_char', TType.STRING, 1)
      oprot.writeString(self.escape_char)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.escape_char is None:
      raise TProtocol.TProtocolException(message='Required field escape_char is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TLiteralPredicate(object):
  """
  Attributes:
   - value
   - is_null
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'value', None, None, ), # 1
    (2, TType.BOOL, 'is_null', None, None, ), # 2
  )

  def __init__(self, value=None, is_null=None,):
    self.value = value
    self.is_null = is_null

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.value = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.is_null = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TLiteralPredicate')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.BOOL, 1)
      oprot.writeBool(self.value)
      oprot.writeFieldEnd()
    if self.is_null is not None:
      oprot.writeFieldBegin('is_null', TType.BOOL, 2)
      oprot.writeBool(self.is_null)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    if self.is_null is None:
      raise TProtocol.TProtocolException(message='Required field is_null is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TTupleIsNullPredicate(object):
  """
  Attributes:
   - tuple_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'tuple_ids', (TType.I32,None), None, ), # 1
  )

  def __init__(self, tuple_ids=None,):
    self.tuple_ids = tuple_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.tuple_ids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.tuple_ids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TTupleIsNullPredicate')
    if self.tuple_ids is not None:
      oprot.writeFieldBegin('tuple_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.tuple_ids))
      for iter6 in self.tuple_ids:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tuple_ids is None:
      raise TProtocol.TProtocolException(message='Required field tuple_ids is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TSlotRef(object):
  """
  Attributes:
   - slot_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'slot_id', None, None, ), # 1
  )

  def __init__(self, slot_id=None,):
    self.slot_id = slot_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.slot_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TSlotRef')
    if self.slot_id is not None:
      oprot.writeFieldBegin('slot_id', TType.I32, 1)
      oprot.writeI32(self.slot_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.slot_id is None:
      raise TProtocol.TProtocolException(message='Required field slot_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TStringLiteral(object):
  """
  Attributes:
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'value', None, None, ), # 1
  )

  def __init__(self, value=None,):
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TStringLiteral')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 1)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TExprNode(object):
  """
  Attributes:
   - node_type
   - type
   - num_children
   - fn
   - vararg_start_idx
   - bool_literal
   - case_expr
   - date_literal
   - float_literal
   - int_literal
   - in_predicate
   - is_null_pred
   - like_pred
   - literal_pred
   - slot_ref
   - string_literal
   - tuple_is_null_pred
   - decimal_literal
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'node_type', None, None, ), # 1
    (2, TType.STRUCT, 'type', (Types.ttypes.TColumnType, Types.ttypes.TColumnType.thrift_spec), None, ), # 2
    (3, TType.I32, 'num_children', None, None, ), # 3
    (4, TType.STRUCT, 'fn', (Types.ttypes.TFunction, Types.ttypes.TFunction.thrift_spec), None, ), # 4
    (5, TType.I32, 'vararg_start_idx', None, None, ), # 5
    (6, TType.STRUCT, 'bool_literal', (TBoolLiteral, TBoolLiteral.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'case_expr', (TCaseExpr, TCaseExpr.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'date_literal', (TDateLiteral, TDateLiteral.thrift_spec), None, ), # 8
    (9, TType.STRUCT, 'float_literal', (TFloatLiteral, TFloatLiteral.thrift_spec), None, ), # 9
    (10, TType.STRUCT, 'int_literal', (TIntLiteral, TIntLiteral.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'in_predicate', (TInPredicate, TInPredicate.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'is_null_pred', (TIsNullPredicate, TIsNullPredicate.thrift_spec), None, ), # 12
    (13, TType.STRUCT, 'like_pred', (TLikePredicate, TLikePredicate.thrift_spec), None, ), # 13
    (14, TType.STRUCT, 'literal_pred', (TLiteralPredicate, TLiteralPredicate.thrift_spec), None, ), # 14
    (15, TType.STRUCT, 'slot_ref', (TSlotRef, TSlotRef.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'string_literal', (TStringLiteral, TStringLiteral.thrift_spec), None, ), # 16
    (17, TType.STRUCT, 'tuple_is_null_pred', (TTupleIsNullPredicate, TTupleIsNullPredicate.thrift_spec), None, ), # 17
    (18, TType.STRUCT, 'decimal_literal', (TDecimalLiteral, TDecimalLiteral.thrift_spec), None, ), # 18
  )

  def __init__(self, node_type=None, type=None, num_children=None, fn=None, vararg_start_idx=None, bool_literal=None, case_expr=None, date_literal=None, float_literal=None, int_literal=None, in_predicate=None, is_null_pred=None, like_pred=None, literal_pred=None, slot_ref=None, string_literal=None, tuple_is_null_pred=None, decimal_literal=None,):
    self.node_type = node_type
    self.type = type
    self.num_children = num_children
    self.fn = fn
    self.vararg_start_idx = vararg_start_idx
    self.bool_literal = bool_literal
    self.case_expr = case_expr
    self.date_literal = date_literal
    self.float_literal = float_literal
    self.int_literal = int_literal
    self.in_predicate = in_predicate
    self.is_null_pred = is_null_pred
    self.like_pred = like_pred
    self.literal_pred = literal_pred
    self.slot_ref = slot_ref
    self.string_literal = string_literal
    self.tuple_is_null_pred = tuple_is_null_pred
    self.decimal_literal = decimal_literal

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.node_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.type = Types.ttypes.TColumnType()
          self.type.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num_children = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.fn = Types.ttypes.TFunction()
          self.fn.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.vararg_start_idx = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.bool_literal = TBoolLiteral()
          self.bool_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.case_expr = TCaseExpr()
          self.case_expr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.date_literal = TDateLiteral()
          self.date_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.float_literal = TFloatLiteral()
          self.float_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.int_literal = TIntLiteral()
          self.int_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.in_predicate = TInPredicate()
          self.in_predicate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.is_null_pred = TIsNullPredicate()
          self.is_null_pred.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.like_pred = TLikePredicate()
          self.like_pred.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.literal_pred = TLiteralPredicate()
          self.literal_pred.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.slot_ref = TSlotRef()
          self.slot_ref.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.string_literal = TStringLiteral()
          self.string_literal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.tuple_is_null_pred = TTupleIsNullPredicate()
          self.tuple_is_null_pred.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.decimal_literal = TDecimalLiteral()
          self.decimal_literal.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TExprNode')
    if self.node_type is not None:
      oprot.writeFieldBegin('node_type', TType.I32, 1)
      oprot.writeI32(self.node_type)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRUCT, 2)
      self.type.write(oprot)
      oprot.writeFieldEnd()
    if self.num_children is not None:
      oprot.writeFieldBegin('num_children', TType.I32, 3)
      oprot.writeI32(self.num_children)
      oprot.writeFieldEnd()
    if self.fn is not None:
      oprot.writeFieldBegin('fn', TType.STRUCT, 4)
      self.fn.write(oprot)
      oprot.writeFieldEnd()
    if self.vararg_start_idx is not None:
      oprot.writeFieldBegin('vararg_start_idx', TType.I32, 5)
      oprot.writeI32(self.vararg_start_idx)
      oprot.writeFieldEnd()
    if self.bool_literal is not None:
      oprot.writeFieldBegin('bool_literal', TType.STRUCT, 6)
      self.bool_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.case_expr is not None:
      oprot.writeFieldBegin('case_expr', TType.STRUCT, 7)
      self.case_expr.write(oprot)
      oprot.writeFieldEnd()
    if self.date_literal is not None:
      oprot.writeFieldBegin('date_literal', TType.STRUCT, 8)
      self.date_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.float_literal is not None:
      oprot.writeFieldBegin('float_literal', TType.STRUCT, 9)
      self.float_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.int_literal is not None:
      oprot.writeFieldBegin('int_literal', TType.STRUCT, 10)
      self.int_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.in_predicate is not None:
      oprot.writeFieldBegin('in_predicate', TType.STRUCT, 11)
      self.in_predicate.write(oprot)
      oprot.writeFieldEnd()
    if self.is_null_pred is not None:
      oprot.writeFieldBegin('is_null_pred', TType.STRUCT, 12)
      self.is_null_pred.write(oprot)
      oprot.writeFieldEnd()
    if self.like_pred is not None:
      oprot.writeFieldBegin('like_pred', TType.STRUCT, 13)
      self.like_pred.write(oprot)
      oprot.writeFieldEnd()
    if self.literal_pred is not None:
      oprot.writeFieldBegin('literal_pred', TType.STRUCT, 14)
      self.literal_pred.write(oprot)
      oprot.writeFieldEnd()
    if self.slot_ref is not None:
      oprot.writeFieldBegin('slot_ref', TType.STRUCT, 15)
      self.slot_ref.write(oprot)
      oprot.writeFieldEnd()
    if self.string_literal is not None:
      oprot.writeFieldBegin('string_literal', TType.STRUCT, 16)
      self.string_literal.write(oprot)
      oprot.writeFieldEnd()
    if self.tuple_is_null_pred is not None:
      oprot.writeFieldBegin('tuple_is_null_pred', TType.STRUCT, 17)
      self.tuple_is_null_pred.write(oprot)
      oprot.writeFieldEnd()
    if self.decimal_literal is not None:
      oprot.writeFieldBegin('decimal_literal', TType.STRUCT, 18)
      self.decimal_literal.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.node_type is None:
      raise TProtocol.TProtocolException(message='Required field node_type is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.num_children is None:
      raise TProtocol.TProtocolException(message='Required field num_children is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TExpr(object):
  """
  Attributes:
   - nodes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nodes', (TType.STRUCT,(TExprNode, TExprNode.thrift_spec)), None, ), # 1
  )

  def __init__(self, nodes=None,):
    self.nodes = nodes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nodes = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = TExprNode()
            _elem12.read(iprot)
            self.nodes.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TExpr')
    if self.nodes is not None:
      oprot.writeFieldBegin('nodes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nodes))
      for iter13 in self.nodes:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodes is None:
      raise TProtocol.TProtocolException(message='Required field nodes is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TExprBatch(object):
  """
  Attributes:
   - exprs
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'exprs', (TType.STRUCT,(TExpr, TExpr.thrift_spec)), None, ), # 1
  )

  def __init__(self, exprs=None,):
    self.exprs = exprs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.exprs = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = TExpr()
            _elem19.read(iprot)
            self.exprs.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TExprBatch')
    if self.exprs is not None:
      oprot.writeFieldBegin('exprs', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.exprs))
      for iter20 in self.exprs:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.exprs is None:
      raise TProtocol.TProtocolException(message='Required field exprs is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
