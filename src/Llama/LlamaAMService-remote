#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from Llama import LlamaAMService
from Llama.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  TLlamaAMRegisterResponse Register(TLlamaAMRegisterRequest request)'
  print '  TLlamaAMUnregisterResponse Unregister(TLlamaAMUnregisterRequest request)'
  print '  TLlamaAMReservationResponse Reserve(TLlamaAMReservationRequest request)'
  print '  TLlamaAMReservationExpansionResponse Expand(TLlamaAMReservationExpansionRequest request)'
  print '  TLlamaAMReleaseResponse Release(TLlamaAMReleaseRequest request)'
  print '  TLlamaAMGetNodesResponse GetNodes(TLlamaAMGetNodesRequest request)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = LlamaAMService.Client(protocol)
transport.open()

if cmd == 'Register':
  if len(args) != 1:
    print 'Register requires 1 args'
    sys.exit(1)
  pp.pprint(client.Register(eval(args[0]),))

elif cmd == 'Unregister':
  if len(args) != 1:
    print 'Unregister requires 1 args'
    sys.exit(1)
  pp.pprint(client.Unregister(eval(args[0]),))

elif cmd == 'Reserve':
  if len(args) != 1:
    print 'Reserve requires 1 args'
    sys.exit(1)
  pp.pprint(client.Reserve(eval(args[0]),))

elif cmd == 'Expand':
  if len(args) != 1:
    print 'Expand requires 1 args'
    sys.exit(1)
  pp.pprint(client.Expand(eval(args[0]),))

elif cmd == 'Release':
  if len(args) != 1:
    print 'Release requires 1 args'
    sys.exit(1)
  pp.pprint(client.Release(eval(args[0]),))

elif cmd == 'GetNodes':
  if len(args) != 1:
    print 'GetNodes requires 1 args'
    sys.exit(1)
  pp.pprint(client.GetNodes(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
